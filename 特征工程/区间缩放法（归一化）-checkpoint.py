"""
归一化：将数据缩放到一个特定的范围，通常是 [0, 1] 或 [-1, 1]。它的目的是确保不同特征的数据在同一尺度上，特别适用于距离度量方法（如 k 近邻、SVM）和神经网络。

https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.MinMaxScaler.html#sklearn.preprocessing.MinMaxScaler
MinMaxScaler:通过将每个特征缩放到给定范围来转换特征。该估计器单独缩放和平移每个特征，使得它处于训练集的给定范围内，例如介于零和一之间。
    feature_range：所需的转换数据范围。元组（最小值，最大值），默认值=（0，1）
    data_max_：最大值
    data_min_：最小值
    data_range_ : 数据的范围 ，计算方式 data_max_ - data_min_

https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.describe.html
DataFrame.describe：生成描述统计数据。描述性统计数据包括总结数据集分布的集中趋势、离散度和形状的统计数据，但不包括NaN值。分析数字和对象系列以及DataFrame混合数据类型的列集。输出将根据提供的内容而有所不同
    count: 每列的非空值数量。
        eg：每列的 count 都是 3，因为每列都有 3 个数据点。等于0
    mean: 每列的平均值。即所有数据点的总和除以数据点的数量。
        eg：
           第 0 列：(1+2+0)/3=1.0
           第 1 列：(-1+0+0)/3=1.0
           第 2 列：(2+0+(-10))/3=-2.666667
           第 3 列：(3+3+3)/3=3.0
    std: 每列的标准差。数据的离散程度，即数据点与均值的平均距离。
        eg：
            第 0 列: 1.0 表示标准差为 sqrt(((1-1)^2 + (2-1)^2 + (0-1)^2) / 3) = 1.0
            第 1 列: 1.0 表示标准差为 sqrt(((-1-0)^2 + (0-0)^2 + (1-0)^2) / 3) = 1.0
            第 2 列: 6.429101 表示标准差为 sqrt(((2-(-2.666667))^2 + (0-(-2.666667))^2 + ((-10)-(-2.666667))^2) / 3) = 6.429101
            第 3 列: 0.0 表示标准差为 0.0（因为所有值都相同）
    min: 每列的最小值。
    25%: 每列的第一个四分位数（25%分位数）。表示 25% 的数据小于或等于这个值。
        数据来源：每列数据按升序排列后的第 25 百分位数值。
         eg：
            第 0 列：0.5
            第 1 列：-0.5
            第 2 列：-5
            第 3 列：3
    50%: 每列的中位数（50%分位数）。表示 50% 的数据小于或等于这个值。
        数据来源：每列数据按升序排列后的中间值。
        eg：
            第 0 列：1.0
            第 1 列：0.0
            第 2 列：0.0
            第 3 列：3.0
    75%: 每列的第三个四分位数（75%分位数）。表示 75% 的数据小于或等于这个值。
        数据来源：每列数据按升序排列后的第 75 百分位数值。
        eg：
            第 0 列：1.5
            第 1 列：0.5
            第 2 列：1.0
            第 3 列：3.0
    max: 每列的最大值。

关于x_test 的归一化结果 [1.5, 0.0, 1.0, 0.0] 确实超出了 feature_range=(0, 1) 的范围：
    1.原因分析
        当我们对 x_test 进行归一化时，使用的缩放比例是根据训练数据 x 中的最小值和最大值计算的。x_test 中的某些值超出了训练数据 x 的范围，因此在归一化时这些值被缩放到超出 [0, 1] 的范围。
    2.计算过程
        使用 MinMaxScaler 时，每个特征的归一化公式为：
            Xnorm= (X−Xmin)/(Xmax−Xmin)
        对于训练数据 x，我们已经得到了以下最大值和最小值：
            data_max_: [2.0, 1.0, 2.0, 3.0]
            data_min_: [0.0, -1.0, -10.0, 3.0]
        对于 x_test = [[3, -1, 2, 3]]，逐列计算归一化结果：
            第一列：(3-0)/(2-0)=3/2=1.5
            第二列：[-1-(-1)]/[1-(-1)] = 0/2 = 0.0
            第三列：[2-(-10)]/[2-(-10)] = 12/12 = 1.0
            第四列：(3-3)/(3/3) =  undefined（因为 data_range_ 为 0）
        第四列由于最大值和最小值相同导致数据归一化时除以 0，会导致结果为 0 或 undefined。但在这种实现中，它设为 0。
    3.正确理解和处理方法
        了解结果超出范围的情况:
            在实际应用中，特征值超出训练数据范围是常见情况，可能需要注意并处理这些情况。
        确保数据范围一致:
            训练和测试数据尽量保证来自同一分布，可以避免归一化结果超出范围。
        可视化归一化结果:
            通过打印归一化结果来理解数据的缩放。
    4.总结
        x_test 归一化结果 [1.5, 0.0, 1.0, 0.0] 说明数据超出了训练集的范围。我们需要对归一化结果有合理预期，并针对超出范围的数据采取适当措施，如对数据范围进行检查和处理。
四分位数：用于描述数据集的分布情况。在描述统计学中，常用的四分位数包括第一四分位数（Q1：25%）、第二四分位数（中位数，Q2：50%）、和第三四分位数（Q3：75%）。
    计算过程解释：
        数据集排序：
        首先，将数据集按照数值大小进行升序排序。
    确定数据集长度 n：
        计算数据集中数据点的总数 n。
    计算各个四分位数的位置：
        25% 分位数（Q1，第一四分位数）：
            Q1 的位置计算公式为 (n + 1) * 0.25。这里乘以 0.25 是因为我们要找的是第 25% 位置的值。如果计算结果不是整数，通常会采用插值的方式获取。
        50% 分位数（Q2，中位数）：
            Q2 的位置计算公式为 (n + 1) * 0.5。中位数是数据集的中间值，即 50% 的数据小于或等于该值。
        75% 分位数（Q3，第三四分位数）：
            Q3 的位置计算公式为 (n + 1) * 0.75。这里乘以 0.75 是因为我们要找的是第 75% 位置的值。
    插值计算：如果计算的位置不是整数，通常会使用插值的方法来获取相应位置的值。例如，如果位置落在两个数据点之间，可以使用线性插值的方法计算相应的四分位数。
        线性插值计算步骤：
           假设我们已经按升序对数据集进行了排序，并且要计算的位置落在两个数据点 x[k] 和 x[k+1] 之间，其中 k 是整数。
           确定位置 p：计算四分位数所对应的位置 p，例如第 25% 位数对应的位置为 (n + 1) * 0.25，其中 n 是数据集中数据点的总数。
        计算整数部分 k：确定 p 位于哪两个数据点之间。找到满足条件 k <= p < k+1 的整数 k。
        线性插值公式：
            使用线性插值公式计算四分位数的值：
                Q = (1-D)*x[k]+d*x[k+1]
                其中，
                    Q 是插值得到的四分位数值。
                    d = p-k是位置 p 在 x[k]和x[k-1]之间的相对距离
        eg:
           假设我们有一个已排序的数据集 x = [1, 3, 5, 7, 9]，要计算的位置 p = 2.5。
            1.找到位置 p = 2.5 在 x 中的索引 k = 2 和 k + 1 = 3，即在 x[2] = 5 和 x[3] = 7 之间。
            2.计算插值：
                Q1 = (1-0.5)*5+0.5*7 =6
        注意事项：
            插值计算通常用于确定在已知数据点之间某个位置的值。
            插值的精度取决于数据的分布和插值方法的选择。
            在实际应用中，可以根据具体情况选择合适的插值方法，如线性插值、多项式插值等。
    eg:
        # 创建一个数组
        x = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])

        # 使用 numpy 的 percentile 函数计算四分位数
        q1 = np.percentile(x, 25)  # 第一四分位数（Q1）
        q2 = np.percentile(x, 50)  # 中位数（Q2）
        q3 = np.percentile(x, 75)  # 第三四分位数（Q3）

"""
import numpy as np
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

if __name__ == '__main__':
    x = np.array([
        [1, -1, 2, 3],
        [2, 0, 0, 3],
        [0, 1, -10, 3]
    ], dtype=np.float64)

    # 定义归一化
    scaler = MinMaxScaler(feature_range=(0, 1))
    # 拟合训练数据
    scaler.fit(x)
    scaler.data_max_  # 原始特征属性的最大值,按列查找
    # [2. 1. 2. 3.]
    scaler.data_min_  # 原始特征属性的最小值,按列查找
    # [  0.  -1. -10.   3.]
    scaler.data_range_  # 原始特征属性的取值范围（data_max_ - data_min_）
    # [ 2.  2. 12.  0.]
    scaler.transform(x)
    """
    归一化后的训练数据:
        [[0.5        0.         1.         0.        ]
         [1.         0.5        0.83333333 0.        ]
         [0.         1.         0.         0.        ]]
    """
    x_test = [[3, -1, 2, 3]]
    scaler.transform(x_test)
    """
    归一化后的测试数据:
        [[1.5 0.  1.  0. ]]
    """
    print(pd.DataFrame(x).describe())  # 原始数据的统计摘要
    """
                0    1          2    3
        count  3.0  3.0   3.000000  3.0 #每列的非空值数量。
        mean   1.0  0.0  -2.666667  3.0 #每列的平均值。
        std    1.0  1.0   6.429101  0.0 #每列的标准差。
        min    0.0 -1.0 -10.000000  3.0 #每列的最小值。
        25%    0.5 -0.5  -5.000000  3.0 #每列的第一个四分位数（25%分位数）。
        50%    1.0  0.0   0.000000  3.0 #每列的中位数（50%分位数）。
        75%    1.5  0.5   1.000000  3.0 #每列的第三个四分位数（75%分位数）。
        max    2.0  1.0   2.000000  3.0 #每列的最大值。
    """
    pd.DataFrame(scaler.transform(x)).describe()  # 归一化后数据的统计摘要
    """
                  0     1         2    3
        count  3.00  3.00  3.000000  3.0
        mean   0.50  0.50  0.611111  0.0
        std    0.50  0.50  0.535758  0.0
        min    0.00  0.00  0.000000  0.0
        25%    0.25  0.25  0.416667  0.0
        50%    0.50  0.50  0.833333  0.0
        75%    0.75  0.75  0.916667  0.0
        max    1.00  1.00  1.000000  0.0
    """
